Terminals which are not used

   MAIN
   VOID


State 2 conflicts: 1 shift/reduce
State 8 conflicts: 1 shift/reduce
State 48 conflicts: 2 shift/reduce, 2 reduce/reduce
State 50 conflicts: 9 shift/reduce
State 87 conflicts: 2 shift/reduce, 2 reduce/reduce
State 88 conflicts: 9 shift/reduce
State 129 conflicts: 1 shift/reduce
State 130 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 132 conflicts: 1 shift/reduce
State 133 conflicts: 5 shift/reduce


Grammar

    0 $accept: cpp_prog $end

    1 cpp_prog: start_part translation_unit

    2 start_part: /* empty */

    3 translation_unit: external_declare
    4                 | translation_unit external_declare

    5 external_declare: function_defination
    6                 | declaration

    7 declaration: declaration_specifiers_sup declarator_list ';'

    8 declarator_list: declarator
    9                | declarator_list ',' declarator

   10 declarator: direct_declarator

   11 direct_declarator: ID
   12                  | array_declarator

   13 array_declarator: ID array_dimdec_list

   14 array_dimdec_list: '[' constant ']'
   15                  | '[' constant ']' array_dimdec_list

   16 declaration_specifiers_sup: declaration_specifiers

   17 declaration_specifiers: storage_class_specifier type_specifier

   18 storage_class_specifier: /* empty */
   19                        | AUTO
   20                        | STATIC

   21 type_specifier: INT
   22               | struct_specifier

   23 struct_specifier: struct_defination
   24                 | STRUCT ID

   25 struct_defination: STRUCT ID '{' struct_declaration_list '}'
   26                  | STRUCT '{' struct_declaration_list '}'

   27 struct_declaration_list: struct_declaration
   28                        | struct_declaration_list struct_declaration

   29 struct_declaration: type_specifier_sup declarator_list ';'

   30 type_specifier_sup: type_specifier

   31 function_defination: function_defination_head compound_statement

   32 function_defination_head: rettype_specifier ID '(' parameter_list ')'

   33 rettype_specifier: INT
   34                  | CHAR
   35                  | /* empty */

   36 parameter_list: parameter_declaration
   37               | parameter_list ',' parameter_declaration

   38 parameter_declaration: declaration_specifiers_sup declarator

   39 compound_statement: '{' block_item_list '}'
   40                   | '{' '}'

   41 declaration_list: declaration
   42                 | declaration_list declaration

   43 block_item_list: declaration_list
   44                | statement_list
   45                | block_item_list declaration_list
   46                | block_item_list statement_list

   47 statement_list: statement
   48               | statement_list statement

   49 statement: printf_statement
   50          | expression_statement
   51          | return_statement

   52 return_statement: RETURN expression ';'

   53 expression_statement: expression ';'
   54                     | ';'

   55 printf_statement: PRINTF '(' expression ')' ';'

   56 expression: assignment_expression
   57           | expression ',' assignment_expression

   58 assignment_expression: conditional_expression
   59                      | unary_expression '=' assignment_expression

   60 conditional_expression: logical_expression

   61 logical_expression: binary_expression
   62                   | logical_expression LOGOR logical_expression
   63                   | logical_expression LOGAND logical_expression
   64                   | logical_expression LOGEQU logical_expression
   65                   | logical_expression LOGNEQ logical_expression

   66 binary_expression: relational_expression

   67 relational_expression: shift_expression
   68                      | relational_expression MORETHAN relational_expression
   69                      | relational_expression LESSTHAN relational_expression
   70                      | relational_expression MOREEQU relational_expression
   71                      | relational_expression LESSEQU relational_expression

   72 shift_expression: arithmetic_exp

   73 arithmetic_exp: cast_expression
   74               | arithmetic_exp '+' arithmetic_exp
   75               | arithmetic_exp '-' arithmetic_exp
   76               | arithmetic_exp '*' arithmetic_exp
   77               | arithmetic_exp '/' arithmetic_exp
   78               | arithmetic_exp '%' arithmetic_exp

   79 cast_expression: unary_sup_expression

   80 unary_sup_expression: noarray_expression
   81                     | '-' unary_sup_expression
   82                     | '!' unary_sup_expression

   83 noarray_expression: unary_expression

   84 unary_expression: postfix_expression

   85 postfix_expression: primary_expression
   86                   | postfix_expression '[' expression ']'
   87                   | postfix_expression '.' ID
   88                   | funccall_head '(' argument_expression_list ')'

   89 funccall_head: ID

   90 primary_expression: ID
   91                   | constant
   92                   | '(' expression ')'

   93 argument_expression_list: /* empty */
   94                         | assignment_expression
   95                         | argument_expression_list ',' assignment_expression

   96 constant: NUM
   97         | CHARACTER


Terminals, with rules where they appear

$end (0) 0
'!' (33) 82
'%' (37) 78
'(' (40) 32 55 88 92
')' (41) 32 55 88 92
'*' (42) 76
'+' (43) 74
',' (44) 9 37 57 95
'-' (45) 75 81
'.' (46) 87
'/' (47) 77
';' (59) 7 29 52 53 54 55
'=' (61) 59
'[' (91) 14 15 86
']' (93) 14 15 86
'{' (123) 25 26 39 40
'}' (125) 25 26 39 40
error (256)
MAIN (258)
PRINTF (259) 55
INT (260) 21 33
VOID (261)
CHAR (262) 34
AUTO (263) 19
STATIC (264) 20
STRUCT (265) 24 25 26
RETURN (266) 52
NUM (267) 96
CHARACTER (268) 97
ID (269) 11 13 24 25 32 87 89 90
LOGOR (270) 62
LOGAND (271) 63
LOGNEQ (272) 65
LOGEQU (273) 64
LESSEQU (274) 71
MOREEQU (275) 70
LESSTHAN (276) 69
MORETHAN (277) 68


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
cpp_prog (40)
    on left: 1, on right: 0
start_part (41)
    on left: 2, on right: 1
translation_unit (42)
    on left: 3 4, on right: 1 4
external_declare (43)
    on left: 5 6, on right: 3 4
declaration (44)
    on left: 7, on right: 6 41 42
declarator_list (45)
    on left: 8 9, on right: 7 9 29
declarator (46)
    on left: 10, on right: 8 9 38
direct_declarator (47)
    on left: 11 12, on right: 10
array_declarator (48)
    on left: 13, on right: 12
array_dimdec_list (49)
    on left: 14 15, on right: 13 15
declaration_specifiers_sup (50)
    on left: 16, on right: 7 38
declaration_specifiers (51)
    on left: 17, on right: 16
storage_class_specifier (52)
    on left: 18 19 20, on right: 17
type_specifier (53)
    on left: 21 22, on right: 17 30
struct_specifier (54)
    on left: 23 24, on right: 22
struct_defination (55)
    on left: 25 26, on right: 23
struct_declaration_list (56)
    on left: 27 28, on right: 25 26 28
struct_declaration (57)
    on left: 29, on right: 27 28
type_specifier_sup (58)
    on left: 30, on right: 29
function_defination (59)
    on left: 31, on right: 5
function_defination_head (60)
    on left: 32, on right: 31
rettype_specifier (61)
    on left: 33 34 35, on right: 32
parameter_list (62)
    on left: 36 37, on right: 32 37
parameter_declaration (63)
    on left: 38, on right: 36 37
compound_statement (64)
    on left: 39 40, on right: 31
declaration_list (65)
    on left: 41 42, on right: 42 43 45
block_item_list (66)
    on left: 43 44 45 46, on right: 39 45 46
statement_list (67)
    on left: 47 48, on right: 44 46 48
statement (68)
    on left: 49 50 51, on right: 47 48
return_statement (69)
    on left: 52, on right: 51
expression_statement (70)
    on left: 53 54, on right: 50
printf_statement (71)
    on left: 55, on right: 49
expression (72)
    on left: 56 57, on right: 52 53 55 57 86 92
assignment_expression (73)
    on left: 58 59, on right: 56 57 59 94 95
conditional_expression (74)
    on left: 60, on right: 58
logical_expression (75)
    on left: 61 62 63 64 65, on right: 60 62 63 64 65
binary_expression (76)
    on left: 66, on right: 61
relational_expression (77)
    on left: 67 68 69 70 71, on right: 66 68 69 70 71
shift_expression (78)
    on left: 72, on right: 67
arithmetic_exp (79)
    on left: 73 74 75 76 77 78, on right: 72 74 75 76 77 78
cast_expression (80)
    on left: 79, on right: 73
unary_sup_expression (81)
    on left: 80 81 82, on right: 79 81 82
noarray_expression (82)
    on left: 83, on right: 80
unary_expression (83)
    on left: 84, on right: 59 83
postfix_expression (84)
    on left: 85 86 87 88, on right: 84 86 87
funccall_head (85)
    on left: 89, on right: 88
primary_expression (86)
    on left: 90 91 92, on right: 85
argument_expression_list (87)
    on left: 93 94 95, on right: 88 95
constant (88)
    on left: 96 97, on right: 14 15 91


state 0

    0 $accept: . cpp_prog $end
    1 cpp_prog: . start_part translation_unit
    2 start_part: .

    $default  reduce using rule 2 (start_part)

    cpp_prog    go to state 1
    start_part  go to state 2


state 1

    0 $accept: cpp_prog . $end

    $end  shift, and go to state 3


state 2

    1 cpp_prog: start_part . translation_unit
    3 translation_unit: . external_declare
    4                 | . translation_unit external_declare
    5 external_declare: . function_defination
    6                 | . declaration
    7 declaration: . declaration_specifiers_sup declarator_list ';'
   16 declaration_specifiers_sup: . declaration_specifiers
   17 declaration_specifiers: . storage_class_specifier type_specifier
   18 storage_class_specifier: .  [INT, STRUCT]
   19                        | . AUTO
   20                        | . STATIC
   31 function_defination: . function_defination_head compound_statement
   32 function_defination_head: . rettype_specifier ID '(' parameter_list ')'
   33 rettype_specifier: . INT
   34                  | . CHAR
   35                  | .  [ID]

    INT     shift, and go to state 4
    CHAR    shift, and go to state 5
    AUTO    shift, and go to state 6
    STATIC  shift, and go to state 7

    INT       [reduce using rule 18 (storage_class_specifier)]
    ID        reduce using rule 35 (rettype_specifier)
    $default  reduce using rule 18 (storage_class_specifier)

    translation_unit            go to state 8
    external_declare            go to state 9
    declaration                 go to state 10
    declaration_specifiers_sup  go to state 11
    declaration_specifiers      go to state 12
    storage_class_specifier     go to state 13
    function_defination         go to state 14
    function_defination_head    go to state 15
    rettype_specifier           go to state 16


state 3

    0 $accept: cpp_prog $end .

    $default  accept


state 4

   33 rettype_specifier: INT .

    $default  reduce using rule 33 (rettype_specifier)


state 5

   34 rettype_specifier: CHAR .

    $default  reduce using rule 34 (rettype_specifier)


state 6

   19 storage_class_specifier: AUTO .

    $default  reduce using rule 19 (storage_class_specifier)


state 7

   20 storage_class_specifier: STATIC .

    $default  reduce using rule 20 (storage_class_specifier)


state 8

    1 cpp_prog: start_part translation_unit .  [$end]
    4 translation_unit: translation_unit . external_declare
    5 external_declare: . function_defination
    6                 | . declaration
    7 declaration: . declaration_specifiers_sup declarator_list ';'
   16 declaration_specifiers_sup: . declaration_specifiers
   17 declaration_specifiers: . storage_class_specifier type_specifier
   18 storage_class_specifier: .  [INT, STRUCT]
   19                        | . AUTO
   20                        | . STATIC
   31 function_defination: . function_defination_head compound_statement
   32 function_defination_head: . rettype_specifier ID '(' parameter_list ')'
   33 rettype_specifier: . INT
   34                  | . CHAR
   35                  | .  [ID]

    INT     shift, and go to state 4
    CHAR    shift, and go to state 5
    AUTO    shift, and go to state 6
    STATIC  shift, and go to state 7

    INT       [reduce using rule 18 (storage_class_specifier)]
    STRUCT    reduce using rule 18 (storage_class_specifier)
    ID        reduce using rule 35 (rettype_specifier)
    $default  reduce using rule 1 (cpp_prog)

    external_declare            go to state 17
    declaration                 go to state 10
    declaration_specifiers_sup  go to state 11
    declaration_specifiers      go to state 12
    storage_class_specifier     go to state 13
    function_defination         go to state 14
    function_defination_head    go to state 15
    rettype_specifier           go to state 16


state 9

    3 translation_unit: external_declare .

    $default  reduce using rule 3 (translation_unit)


state 10

    6 external_declare: declaration .

    $default  reduce using rule 6 (external_declare)


state 11

    7 declaration: declaration_specifiers_sup . declarator_list ';'
    8 declarator_list: . declarator
    9                | . declarator_list ',' declarator
   10 declarator: . direct_declarator
   11 direct_declarator: . ID
   12                  | . array_declarator
   13 array_declarator: . ID array_dimdec_list

    ID  shift, and go to state 18

    declarator_list    go to state 19
    declarator         go to state 20
    direct_declarator  go to state 21
    array_declarator   go to state 22


state 12

   16 declaration_specifiers_sup: declaration_specifiers .

    $default  reduce using rule 16 (declaration_specifiers_sup)


state 13

   17 declaration_specifiers: storage_class_specifier . type_specifier
   21 type_specifier: . INT
   22               | . struct_specifier
   23 struct_specifier: . struct_defination
   24                 | . STRUCT ID
   25 struct_defination: . STRUCT ID '{' struct_declaration_list '}'
   26                  | . STRUCT '{' struct_declaration_list '}'

    INT     shift, and go to state 23
    STRUCT  shift, and go to state 24

    type_specifier     go to state 25
    struct_specifier   go to state 26
    struct_defination  go to state 27


state 14

    5 external_declare: function_defination .

    $default  reduce using rule 5 (external_declare)


state 15

   31 function_defination: function_defination_head . compound_statement
   39 compound_statement: . '{' block_item_list '}'
   40                   | . '{' '}'

    '{'  shift, and go to state 28

    compound_statement  go to state 29


state 16

   32 function_defination_head: rettype_specifier . ID '(' parameter_list ')'

    ID  shift, and go to state 30


state 17

    4 translation_unit: translation_unit external_declare .

    $default  reduce using rule 4 (translation_unit)


state 18

   11 direct_declarator: ID .  [';', ',', ')']
   13 array_declarator: ID . array_dimdec_list
   14 array_dimdec_list: . '[' constant ']'
   15                  | . '[' constant ']' array_dimdec_list

    '['  shift, and go to state 31

    $default  reduce using rule 11 (direct_declarator)

    array_dimdec_list  go to state 32


state 19

    7 declaration: declaration_specifiers_sup declarator_list . ';'
    9 declarator_list: declarator_list . ',' declarator

    ';'  shift, and go to state 33
    ','  shift, and go to state 34


state 20

    8 declarator_list: declarator .

    $default  reduce using rule 8 (declarator_list)


state 21

   10 declarator: direct_declarator .

    $default  reduce using rule 10 (declarator)


state 22

   12 direct_declarator: array_declarator .

    $default  reduce using rule 12 (direct_declarator)


state 23

   21 type_specifier: INT .

    $default  reduce using rule 21 (type_specifier)


state 24

   24 struct_specifier: STRUCT . ID
   25 struct_defination: STRUCT . ID '{' struct_declaration_list '}'
   26                  | STRUCT . '{' struct_declaration_list '}'

    ID   shift, and go to state 35
    '{'  shift, and go to state 36


state 25

   17 declaration_specifiers: storage_class_specifier type_specifier .

    $default  reduce using rule 17 (declaration_specifiers)


state 26

   22 type_specifier: struct_specifier .

    $default  reduce using rule 22 (type_specifier)


state 27

   23 struct_specifier: struct_defination .

    $default  reduce using rule 23 (struct_specifier)


state 28

    7 declaration: . declaration_specifiers_sup declarator_list ';'
   16 declaration_specifiers_sup: . declaration_specifiers
   17 declaration_specifiers: . storage_class_specifier type_specifier
   18 storage_class_specifier: .  [INT, STRUCT]
   19                        | . AUTO
   20                        | . STATIC
   39 compound_statement: '{' . block_item_list '}'
   40                   | '{' . '}'
   41 declaration_list: . declaration
   42                 | . declaration_list declaration
   43 block_item_list: . declaration_list
   44                | . statement_list
   45                | . block_item_list declaration_list
   46                | . block_item_list statement_list
   47 statement_list: . statement
   48               | . statement_list statement
   49 statement: . printf_statement
   50          | . expression_statement
   51          | . return_statement
   52 return_statement: . RETURN expression ';'
   53 expression_statement: . expression ';'
   54                     | . ';'
   55 printf_statement: . PRINTF '(' expression ')' ';'
   56 expression: . assignment_expression
   57           | . expression ',' assignment_expression
   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    PRINTF     shift, and go to state 37
    AUTO       shift, and go to state 6
    STATIC     shift, and go to state 7
    RETURN     shift, and go to state 38
    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    ';'        shift, and go to state 43
    '}'        shift, and go to state 44
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    $default  reduce using rule 18 (storage_class_specifier)

    declaration                 go to state 47
    declaration_specifiers_sup  go to state 11
    declaration_specifiers      go to state 12
    storage_class_specifier     go to state 13
    declaration_list            go to state 48
    block_item_list             go to state 49
    statement_list              go to state 50
    statement                   go to state 51
    return_statement            go to state 52
    expression_statement        go to state 53
    printf_statement            go to state 54
    expression                  go to state 55
    assignment_expression       go to state 56
    conditional_expression      go to state 57
    logical_expression          go to state 58
    binary_expression           go to state 59
    relational_expression       go to state 60
    shift_expression            go to state 61
    arithmetic_exp              go to state 62
    cast_expression             go to state 63
    unary_sup_expression        go to state 64
    noarray_expression          go to state 65
    unary_expression            go to state 66
    postfix_expression          go to state 67
    funccall_head               go to state 68
    primary_expression          go to state 69
    constant                    go to state 70


state 29

   31 function_defination: function_defination_head compound_statement .

    $default  reduce using rule 31 (function_defination)


state 30

   32 function_defination_head: rettype_specifier ID . '(' parameter_list ')'

    '('  shift, and go to state 71


state 31

   14 array_dimdec_list: '[' . constant ']'
   15                  | '[' . constant ']' array_dimdec_list
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40

    constant  go to state 72


state 32

   13 array_declarator: ID array_dimdec_list .

    $default  reduce using rule 13 (array_declarator)


state 33

    7 declaration: declaration_specifiers_sup declarator_list ';' .

    $default  reduce using rule 7 (declaration)


state 34

    9 declarator_list: declarator_list ',' . declarator
   10 declarator: . direct_declarator
   11 direct_declarator: . ID
   12                  | . array_declarator
   13 array_declarator: . ID array_dimdec_list

    ID  shift, and go to state 18

    declarator         go to state 73
    direct_declarator  go to state 21
    array_declarator   go to state 22


state 35

   24 struct_specifier: STRUCT ID .  [ID]
   25 struct_defination: STRUCT ID . '{' struct_declaration_list '}'

    '{'  shift, and go to state 74

    $default  reduce using rule 24 (struct_specifier)


state 36

   21 type_specifier: . INT
   22               | . struct_specifier
   23 struct_specifier: . struct_defination
   24                 | . STRUCT ID
   25 struct_defination: . STRUCT ID '{' struct_declaration_list '}'
   26                  | . STRUCT '{' struct_declaration_list '}'
   26                  | STRUCT '{' . struct_declaration_list '}'
   27 struct_declaration_list: . struct_declaration
   28                        | . struct_declaration_list struct_declaration
   29 struct_declaration: . type_specifier_sup declarator_list ';'
   30 type_specifier_sup: . type_specifier

    INT     shift, and go to state 23
    STRUCT  shift, and go to state 24

    type_specifier           go to state 75
    struct_specifier         go to state 26
    struct_defination        go to state 27
    struct_declaration_list  go to state 76
    struct_declaration       go to state 77
    type_specifier_sup       go to state 78


state 37

   55 printf_statement: PRINTF . '(' expression ')' ';'

    '('  shift, and go to state 79


state 38

   52 return_statement: RETURN . expression ';'
   56 expression: . assignment_expression
   57           | . expression ',' assignment_expression
   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    expression              go to state 80
    assignment_expression   go to state 56
    conditional_expression  go to state 57
    logical_expression      go to state 58
    binary_expression       go to state 59
    relational_expression   go to state 60
    shift_expression        go to state 61
    arithmetic_exp          go to state 62
    cast_expression         go to state 63
    unary_sup_expression    go to state 64
    noarray_expression      go to state 65
    unary_expression        go to state 66
    postfix_expression      go to state 67
    funccall_head           go to state 68
    primary_expression      go to state 69
    constant                go to state 70


state 39

   96 constant: NUM .

    $default  reduce using rule 96 (constant)


state 40

   97 constant: CHARACTER .

    $default  reduce using rule 97 (constant)


state 41

   89 funccall_head: ID .  ['(']
   90 primary_expression: ID .  ['=', LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', '*', '/', ';', ',', '[', ']', ')', '%', '.']

    '('       reduce using rule 89 (funccall_head)
    $default  reduce using rule 90 (primary_expression)


state 42

   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   81                     | '-' . unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    unary_sup_expression  go to state 81
    noarray_expression    go to state 65
    unary_expression      go to state 82
    postfix_expression    go to state 67
    funccall_head         go to state 68
    primary_expression    go to state 69
    constant              go to state 70


state 43

   54 expression_statement: ';' .

    $default  reduce using rule 54 (expression_statement)


state 44

   40 compound_statement: '{' '}' .

    $default  reduce using rule 40 (compound_statement)


state 45

   56 expression: . assignment_expression
   57           | . expression ',' assignment_expression
   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   92                   | '(' . expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    expression              go to state 83
    assignment_expression   go to state 56
    conditional_expression  go to state 57
    logical_expression      go to state 58
    binary_expression       go to state 59
    relational_expression   go to state 60
    shift_expression        go to state 61
    arithmetic_exp          go to state 62
    cast_expression         go to state 63
    unary_sup_expression    go to state 64
    noarray_expression      go to state 65
    unary_expression        go to state 66
    postfix_expression      go to state 67
    funccall_head           go to state 68
    primary_expression      go to state 69
    constant                go to state 70


state 46

   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   82                     | '!' . unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    unary_sup_expression  go to state 84
    noarray_expression    go to state 65
    unary_expression      go to state 82
    postfix_expression    go to state 67
    funccall_head         go to state 68
    primary_expression    go to state 69
    constant              go to state 70


state 47

   41 declaration_list: declaration .

    $default  reduce using rule 41 (declaration_list)


state 48

    7 declaration: . declaration_specifiers_sup declarator_list ';'
   16 declaration_specifiers_sup: . declaration_specifiers
   17 declaration_specifiers: . storage_class_specifier type_specifier
   18 storage_class_specifier: .  [INT, STRUCT]
   19                        | . AUTO
   20                        | . STATIC
   42 declaration_list: declaration_list . declaration
   43 block_item_list: declaration_list .  [PRINTF, INT, AUTO, STATIC, STRUCT, RETURN, NUM, CHARACTER, ID, '-', ';', '}', '(', '!']

    AUTO    shift, and go to state 6
    STATIC  shift, and go to state 7

    INT       reduce using rule 18 (storage_class_specifier)
    INT       [reduce using rule 43 (block_item_list)]
    AUTO      [reduce using rule 43 (block_item_list)]
    STATIC    [reduce using rule 43 (block_item_list)]
    STRUCT    reduce using rule 18 (storage_class_specifier)
    STRUCT    [reduce using rule 43 (block_item_list)]
    $default  reduce using rule 43 (block_item_list)

    declaration                 go to state 85
    declaration_specifiers_sup  go to state 11
    declaration_specifiers      go to state 12
    storage_class_specifier     go to state 13


state 49

    7 declaration: . declaration_specifiers_sup declarator_list ';'
   16 declaration_specifiers_sup: . declaration_specifiers
   17 declaration_specifiers: . storage_class_specifier type_specifier
   18 storage_class_specifier: .  [INT, STRUCT]
   19                        | . AUTO
   20                        | . STATIC
   39 compound_statement: '{' block_item_list . '}'
   41 declaration_list: . declaration
   42                 | . declaration_list declaration
   45 block_item_list: block_item_list . declaration_list
   46                | block_item_list . statement_list
   47 statement_list: . statement
   48               | . statement_list statement
   49 statement: . printf_statement
   50          | . expression_statement
   51          | . return_statement
   52 return_statement: . RETURN expression ';'
   53 expression_statement: . expression ';'
   54                     | . ';'
   55 printf_statement: . PRINTF '(' expression ')' ';'
   56 expression: . assignment_expression
   57           | . expression ',' assignment_expression
   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    PRINTF     shift, and go to state 37
    AUTO       shift, and go to state 6
    STATIC     shift, and go to state 7
    RETURN     shift, and go to state 38
    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    ';'        shift, and go to state 43
    '}'        shift, and go to state 86
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    $default  reduce using rule 18 (storage_class_specifier)

    declaration                 go to state 47
    declaration_specifiers_sup  go to state 11
    declaration_specifiers      go to state 12
    storage_class_specifier     go to state 13
    declaration_list            go to state 87
    statement_list              go to state 88
    statement                   go to state 51
    return_statement            go to state 52
    expression_statement        go to state 53
    printf_statement            go to state 54
    expression                  go to state 55
    assignment_expression       go to state 56
    conditional_expression      go to state 57
    logical_expression          go to state 58
    binary_expression           go to state 59
    relational_expression       go to state 60
    shift_expression            go to state 61
    arithmetic_exp              go to state 62
    cast_expression             go to state 63
    unary_sup_expression        go to state 64
    noarray_expression          go to state 65
    unary_expression            go to state 66
    postfix_expression          go to state 67
    funccall_head               go to state 68
    primary_expression          go to state 69
    constant                    go to state 70


state 50

   44 block_item_list: statement_list .  [PRINTF, INT, AUTO, STATIC, STRUCT, RETURN, NUM, CHARACTER, ID, '-', ';', '}', '(', '!']
   48 statement_list: statement_list . statement
   49 statement: . printf_statement
   50          | . expression_statement
   51          | . return_statement
   52 return_statement: . RETURN expression ';'
   53 expression_statement: . expression ';'
   54                     | . ';'
   55 printf_statement: . PRINTF '(' expression ')' ';'
   56 expression: . assignment_expression
   57           | . expression ',' assignment_expression
   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    PRINTF     shift, and go to state 37
    RETURN     shift, and go to state 38
    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    ';'        shift, and go to state 43
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    PRINTF     [reduce using rule 44 (block_item_list)]
    RETURN     [reduce using rule 44 (block_item_list)]
    NUM        [reduce using rule 44 (block_item_list)]
    CHARACTER  [reduce using rule 44 (block_item_list)]
    ID         [reduce using rule 44 (block_item_list)]
    '-'        [reduce using rule 44 (block_item_list)]
    ';'        [reduce using rule 44 (block_item_list)]
    '('        [reduce using rule 44 (block_item_list)]
    '!'        [reduce using rule 44 (block_item_list)]
    $default   reduce using rule 44 (block_item_list)

    statement               go to state 89
    return_statement        go to state 52
    expression_statement    go to state 53
    printf_statement        go to state 54
    expression              go to state 55
    assignment_expression   go to state 56
    conditional_expression  go to state 57
    logical_expression      go to state 58
    binary_expression       go to state 59
    relational_expression   go to state 60
    shift_expression        go to state 61
    arithmetic_exp          go to state 62
    cast_expression         go to state 63
    unary_sup_expression    go to state 64
    noarray_expression      go to state 65
    unary_expression        go to state 66
    postfix_expression      go to state 67
    funccall_head           go to state 68
    primary_expression      go to state 69
    constant                go to state 70


state 51

   47 statement_list: statement .

    $default  reduce using rule 47 (statement_list)


state 52

   51 statement: return_statement .

    $default  reduce using rule 51 (statement)


state 53

   50 statement: expression_statement .

    $default  reduce using rule 50 (statement)


state 54

   49 statement: printf_statement .

    $default  reduce using rule 49 (statement)


state 55

   53 expression_statement: expression . ';'
   57 expression: expression . ',' assignment_expression

    ';'  shift, and go to state 90
    ','  shift, and go to state 91


state 56

   56 expression: assignment_expression .

    $default  reduce using rule 56 (expression)


state 57

   58 assignment_expression: conditional_expression .

    $default  reduce using rule 58 (assignment_expression)


state 58

   60 conditional_expression: logical_expression .  [';', ',', ']', ')']
   62 logical_expression: logical_expression . LOGOR logical_expression
   63                   | logical_expression . LOGAND logical_expression
   64                   | logical_expression . LOGEQU logical_expression
   65                   | logical_expression . LOGNEQ logical_expression

    LOGOR   shift, and go to state 92
    LOGAND  shift, and go to state 93
    LOGNEQ  shift, and go to state 94
    LOGEQU  shift, and go to state 95

    $default  reduce using rule 60 (conditional_expression)


state 59

   61 logical_expression: binary_expression .

    $default  reduce using rule 61 (logical_expression)


state 60

   66 binary_expression: relational_expression .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, ';', ',', ']', ')']
   68 relational_expression: relational_expression . MORETHAN relational_expression
   69                      | relational_expression . LESSTHAN relational_expression
   70                      | relational_expression . MOREEQU relational_expression
   71                      | relational_expression . LESSEQU relational_expression

    LESSEQU   shift, and go to state 96
    MOREEQU   shift, and go to state 97
    LESSTHAN  shift, and go to state 98
    MORETHAN  shift, and go to state 99

    $default  reduce using rule 66 (binary_expression)


state 61

   67 relational_expression: shift_expression .

    $default  reduce using rule 67 (relational_expression)


state 62

   72 shift_expression: arithmetic_exp .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, ';', ',', ']', ')']
   74 arithmetic_exp: arithmetic_exp . '+' arithmetic_exp
   75               | arithmetic_exp . '-' arithmetic_exp
   76               | arithmetic_exp . '*' arithmetic_exp
   77               | arithmetic_exp . '/' arithmetic_exp
   78               | arithmetic_exp . '%' arithmetic_exp

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    $default  reduce using rule 72 (shift_expression)


state 63

   73 arithmetic_exp: cast_expression .

    $default  reduce using rule 73 (arithmetic_exp)


state 64

   79 cast_expression: unary_sup_expression .

    $default  reduce using rule 79 (cast_expression)


state 65

   80 unary_sup_expression: noarray_expression .

    $default  reduce using rule 80 (unary_sup_expression)


state 66

   59 assignment_expression: unary_expression . '=' assignment_expression
   83 noarray_expression: unary_expression .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', '*', '/', ';', ',', ']', ')', '%']

    '='  shift, and go to state 105

    $default  reduce using rule 83 (noarray_expression)


state 67

   84 unary_expression: postfix_expression .  ['=', LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', '*', '/', ';', ',', ']', ')', '%']
   86 postfix_expression: postfix_expression . '[' expression ']'
   87                   | postfix_expression . '.' ID

    '['  shift, and go to state 106
    '.'  shift, and go to state 107

    $default  reduce using rule 84 (unary_expression)


state 68

   88 postfix_expression: funccall_head . '(' argument_expression_list ')'

    '('  shift, and go to state 108


state 69

   85 postfix_expression: primary_expression .

    $default  reduce using rule 85 (postfix_expression)


state 70

   91 primary_expression: constant .

    $default  reduce using rule 91 (primary_expression)


state 71

   16 declaration_specifiers_sup: . declaration_specifiers
   17 declaration_specifiers: . storage_class_specifier type_specifier
   18 storage_class_specifier: .  [INT, STRUCT]
   19                        | . AUTO
   20                        | . STATIC
   32 function_defination_head: rettype_specifier ID '(' . parameter_list ')'
   36 parameter_list: . parameter_declaration
   37               | . parameter_list ',' parameter_declaration
   38 parameter_declaration: . declaration_specifiers_sup declarator

    AUTO    shift, and go to state 6
    STATIC  shift, and go to state 7

    $default  reduce using rule 18 (storage_class_specifier)

    declaration_specifiers_sup  go to state 109
    declaration_specifiers      go to state 12
    storage_class_specifier     go to state 13
    parameter_list              go to state 110
    parameter_declaration       go to state 111


state 72

   14 array_dimdec_list: '[' constant . ']'
   15                  | '[' constant . ']' array_dimdec_list

    ']'  shift, and go to state 112


state 73

    9 declarator_list: declarator_list ',' declarator .

    $default  reduce using rule 9 (declarator_list)


state 74

   21 type_specifier: . INT
   22               | . struct_specifier
   23 struct_specifier: . struct_defination
   24                 | . STRUCT ID
   25 struct_defination: . STRUCT ID '{' struct_declaration_list '}'
   25                  | STRUCT ID '{' . struct_declaration_list '}'
   26                  | . STRUCT '{' struct_declaration_list '}'
   27 struct_declaration_list: . struct_declaration
   28                        | . struct_declaration_list struct_declaration
   29 struct_declaration: . type_specifier_sup declarator_list ';'
   30 type_specifier_sup: . type_specifier

    INT     shift, and go to state 23
    STRUCT  shift, and go to state 24

    type_specifier           go to state 75
    struct_specifier         go to state 26
    struct_defination        go to state 27
    struct_declaration_list  go to state 113
    struct_declaration       go to state 77
    type_specifier_sup       go to state 78


state 75

   30 type_specifier_sup: type_specifier .

    $default  reduce using rule 30 (type_specifier_sup)


state 76

   21 type_specifier: . INT
   22               | . struct_specifier
   23 struct_specifier: . struct_defination
   24                 | . STRUCT ID
   25 struct_defination: . STRUCT ID '{' struct_declaration_list '}'
   26                  | . STRUCT '{' struct_declaration_list '}'
   26                  | STRUCT '{' struct_declaration_list . '}'
   28 struct_declaration_list: struct_declaration_list . struct_declaration
   29 struct_declaration: . type_specifier_sup declarator_list ';'
   30 type_specifier_sup: . type_specifier

    INT     shift, and go to state 23
    STRUCT  shift, and go to state 24
    '}'     shift, and go to state 114

    type_specifier      go to state 75
    struct_specifier    go to state 26
    struct_defination   go to state 27
    struct_declaration  go to state 115
    type_specifier_sup  go to state 78


state 77

   27 struct_declaration_list: struct_declaration .

    $default  reduce using rule 27 (struct_declaration_list)


state 78

    8 declarator_list: . declarator
    9                | . declarator_list ',' declarator
   10 declarator: . direct_declarator
   11 direct_declarator: . ID
   12                  | . array_declarator
   13 array_declarator: . ID array_dimdec_list
   29 struct_declaration: type_specifier_sup . declarator_list ';'

    ID  shift, and go to state 18

    declarator_list    go to state 116
    declarator         go to state 20
    direct_declarator  go to state 21
    array_declarator   go to state 22


state 79

   55 printf_statement: PRINTF '(' . expression ')' ';'
   56 expression: . assignment_expression
   57           | . expression ',' assignment_expression
   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    expression              go to state 117
    assignment_expression   go to state 56
    conditional_expression  go to state 57
    logical_expression      go to state 58
    binary_expression       go to state 59
    relational_expression   go to state 60
    shift_expression        go to state 61
    arithmetic_exp          go to state 62
    cast_expression         go to state 63
    unary_sup_expression    go to state 64
    noarray_expression      go to state 65
    unary_expression        go to state 66
    postfix_expression      go to state 67
    funccall_head           go to state 68
    primary_expression      go to state 69
    constant                go to state 70


state 80

   52 return_statement: RETURN expression . ';'
   57 expression: expression . ',' assignment_expression

    ';'  shift, and go to state 118
    ','  shift, and go to state 91


state 81

   81 unary_sup_expression: '-' unary_sup_expression .

    $default  reduce using rule 81 (unary_sup_expression)


state 82

   83 noarray_expression: unary_expression .

    $default  reduce using rule 83 (noarray_expression)


state 83

   57 expression: expression . ',' assignment_expression
   92 primary_expression: '(' expression . ')'

    ','  shift, and go to state 91
    ')'  shift, and go to state 119


state 84

   82 unary_sup_expression: '!' unary_sup_expression .

    $default  reduce using rule 82 (unary_sup_expression)


state 85

   42 declaration_list: declaration_list declaration .

    $default  reduce using rule 42 (declaration_list)


state 86

   39 compound_statement: '{' block_item_list '}' .

    $default  reduce using rule 39 (compound_statement)


state 87

    7 declaration: . declaration_specifiers_sup declarator_list ';'
   16 declaration_specifiers_sup: . declaration_specifiers
   17 declaration_specifiers: . storage_class_specifier type_specifier
   18 storage_class_specifier: .  [INT, STRUCT]
   19                        | . AUTO
   20                        | . STATIC
   42 declaration_list: declaration_list . declaration
   45 block_item_list: block_item_list declaration_list .  [PRINTF, INT, AUTO, STATIC, STRUCT, RETURN, NUM, CHARACTER, ID, '-', ';', '}', '(', '!']

    AUTO    shift, and go to state 6
    STATIC  shift, and go to state 7

    INT       reduce using rule 18 (storage_class_specifier)
    INT       [reduce using rule 45 (block_item_list)]
    AUTO      [reduce using rule 45 (block_item_list)]
    STATIC    [reduce using rule 45 (block_item_list)]
    STRUCT    reduce using rule 18 (storage_class_specifier)
    STRUCT    [reduce using rule 45 (block_item_list)]
    $default  reduce using rule 45 (block_item_list)

    declaration                 go to state 85
    declaration_specifiers_sup  go to state 11
    declaration_specifiers      go to state 12
    storage_class_specifier     go to state 13


state 88

   46 block_item_list: block_item_list statement_list .  [PRINTF, INT, AUTO, STATIC, STRUCT, RETURN, NUM, CHARACTER, ID, '-', ';', '}', '(', '!']
   48 statement_list: statement_list . statement
   49 statement: . printf_statement
   50          | . expression_statement
   51          | . return_statement
   52 return_statement: . RETURN expression ';'
   53 expression_statement: . expression ';'
   54                     | . ';'
   55 printf_statement: . PRINTF '(' expression ')' ';'
   56 expression: . assignment_expression
   57           | . expression ',' assignment_expression
   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    PRINTF     shift, and go to state 37
    RETURN     shift, and go to state 38
    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    ';'        shift, and go to state 43
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    PRINTF     [reduce using rule 46 (block_item_list)]
    RETURN     [reduce using rule 46 (block_item_list)]
    NUM        [reduce using rule 46 (block_item_list)]
    CHARACTER  [reduce using rule 46 (block_item_list)]
    ID         [reduce using rule 46 (block_item_list)]
    '-'        [reduce using rule 46 (block_item_list)]
    ';'        [reduce using rule 46 (block_item_list)]
    '('        [reduce using rule 46 (block_item_list)]
    '!'        [reduce using rule 46 (block_item_list)]
    $default   reduce using rule 46 (block_item_list)

    statement               go to state 89
    return_statement        go to state 52
    expression_statement    go to state 53
    printf_statement        go to state 54
    expression              go to state 55
    assignment_expression   go to state 56
    conditional_expression  go to state 57
    logical_expression      go to state 58
    binary_expression       go to state 59
    relational_expression   go to state 60
    shift_expression        go to state 61
    arithmetic_exp          go to state 62
    cast_expression         go to state 63
    unary_sup_expression    go to state 64
    noarray_expression      go to state 65
    unary_expression        go to state 66
    postfix_expression      go to state 67
    funccall_head           go to state 68
    primary_expression      go to state 69
    constant                go to state 70


state 89

   48 statement_list: statement_list statement .

    $default  reduce using rule 48 (statement_list)


state 90

   53 expression_statement: expression ';' .

    $default  reduce using rule 53 (expression_statement)


state 91

   57 expression: expression ',' . assignment_expression
   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    assignment_expression   go to state 120
    conditional_expression  go to state 57
    logical_expression      go to state 58
    binary_expression       go to state 59
    relational_expression   go to state 60
    shift_expression        go to state 61
    arithmetic_exp          go to state 62
    cast_expression         go to state 63
    unary_sup_expression    go to state 64
    noarray_expression      go to state 65
    unary_expression        go to state 66
    postfix_expression      go to state 67
    funccall_head           go to state 68
    primary_expression      go to state 69
    constant                go to state 70


state 92

   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   62                   | logical_expression LOGOR . logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    logical_expression     go to state 121
    binary_expression      go to state 59
    relational_expression  go to state 60
    shift_expression       go to state 61
    arithmetic_exp         go to state 62
    cast_expression        go to state 63
    unary_sup_expression   go to state 64
    noarray_expression     go to state 65
    unary_expression       go to state 82
    postfix_expression     go to state 67
    funccall_head          go to state 68
    primary_expression     go to state 69
    constant               go to state 70


state 93

   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   63                   | logical_expression LOGAND . logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    logical_expression     go to state 122
    binary_expression      go to state 59
    relational_expression  go to state 60
    shift_expression       go to state 61
    arithmetic_exp         go to state 62
    cast_expression        go to state 63
    unary_sup_expression   go to state 64
    noarray_expression     go to state 65
    unary_expression       go to state 82
    postfix_expression     go to state 67
    funccall_head          go to state 68
    primary_expression     go to state 69
    constant               go to state 70


state 94

   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   65                   | logical_expression LOGNEQ . logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    logical_expression     go to state 123
    binary_expression      go to state 59
    relational_expression  go to state 60
    shift_expression       go to state 61
    arithmetic_exp         go to state 62
    cast_expression        go to state 63
    unary_sup_expression   go to state 64
    noarray_expression     go to state 65
    unary_expression       go to state 82
    postfix_expression     go to state 67
    funccall_head          go to state 68
    primary_expression     go to state 69
    constant               go to state 70


state 95

   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   64                   | logical_expression LOGEQU . logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    logical_expression     go to state 124
    binary_expression      go to state 59
    relational_expression  go to state 60
    shift_expression       go to state 61
    arithmetic_exp         go to state 62
    cast_expression        go to state 63
    unary_sup_expression   go to state 64
    noarray_expression     go to state 65
    unary_expression       go to state 82
    postfix_expression     go to state 67
    funccall_head          go to state 68
    primary_expression     go to state 69
    constant               go to state 70


state 96

   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   71                      | relational_expression LESSEQU . relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    relational_expression  go to state 125
    shift_expression       go to state 61
    arithmetic_exp         go to state 62
    cast_expression        go to state 63
    unary_sup_expression   go to state 64
    noarray_expression     go to state 65
    unary_expression       go to state 82
    postfix_expression     go to state 67
    funccall_head          go to state 68
    primary_expression     go to state 69
    constant               go to state 70


state 97

   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   70                      | relational_expression MOREEQU . relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    relational_expression  go to state 126
    shift_expression       go to state 61
    arithmetic_exp         go to state 62
    cast_expression        go to state 63
    unary_sup_expression   go to state 64
    noarray_expression     go to state 65
    unary_expression       go to state 82
    postfix_expression     go to state 67
    funccall_head          go to state 68
    primary_expression     go to state 69
    constant               go to state 70


state 98

   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   69                      | relational_expression LESSTHAN . relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    relational_expression  go to state 127
    shift_expression       go to state 61
    arithmetic_exp         go to state 62
    cast_expression        go to state 63
    unary_sup_expression   go to state 64
    noarray_expression     go to state 65
    unary_expression       go to state 82
    postfix_expression     go to state 67
    funccall_head          go to state 68
    primary_expression     go to state 69
    constant               go to state 70


state 99

   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   68                      | relational_expression MORETHAN . relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    relational_expression  go to state 128
    shift_expression       go to state 61
    arithmetic_exp         go to state 62
    cast_expression        go to state 63
    unary_sup_expression   go to state 64
    noarray_expression     go to state 65
    unary_expression       go to state 82
    postfix_expression     go to state 67
    funccall_head          go to state 68
    primary_expression     go to state 69
    constant               go to state 70


state 100

   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   74               | arithmetic_exp '+' . arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    arithmetic_exp        go to state 129
    cast_expression       go to state 63
    unary_sup_expression  go to state 64
    noarray_expression    go to state 65
    unary_expression      go to state 82
    postfix_expression    go to state 67
    funccall_head         go to state 68
    primary_expression    go to state 69
    constant              go to state 70


state 101

   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   75               | arithmetic_exp '-' . arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    arithmetic_exp        go to state 130
    cast_expression       go to state 63
    unary_sup_expression  go to state 64
    noarray_expression    go to state 65
    unary_expression      go to state 82
    postfix_expression    go to state 67
    funccall_head         go to state 68
    primary_expression    go to state 69
    constant              go to state 70


state 102

   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   76               | arithmetic_exp '*' . arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    arithmetic_exp        go to state 131
    cast_expression       go to state 63
    unary_sup_expression  go to state 64
    noarray_expression    go to state 65
    unary_expression      go to state 82
    postfix_expression    go to state 67
    funccall_head         go to state 68
    primary_expression    go to state 69
    constant              go to state 70


state 103

   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   77               | arithmetic_exp '/' . arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    arithmetic_exp        go to state 132
    cast_expression       go to state 63
    unary_sup_expression  go to state 64
    noarray_expression    go to state 65
    unary_expression      go to state 82
    postfix_expression    go to state 67
    funccall_head         go to state 68
    primary_expression    go to state 69
    constant              go to state 70


state 104

   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   78               | arithmetic_exp '%' . arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    arithmetic_exp        go to state 133
    cast_expression       go to state 63
    unary_sup_expression  go to state 64
    noarray_expression    go to state 65
    unary_expression      go to state 82
    postfix_expression    go to state 67
    funccall_head         go to state 68
    primary_expression    go to state 69
    constant              go to state 70


state 105

   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   59                      | unary_expression '=' . assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    assignment_expression   go to state 134
    conditional_expression  go to state 57
    logical_expression      go to state 58
    binary_expression       go to state 59
    relational_expression   go to state 60
    shift_expression        go to state 61
    arithmetic_exp          go to state 62
    cast_expression         go to state 63
    unary_sup_expression    go to state 64
    noarray_expression      go to state 65
    unary_expression        go to state 66
    postfix_expression      go to state 67
    funccall_head           go to state 68
    primary_expression      go to state 69
    constant                go to state 70


state 106

   56 expression: . assignment_expression
   57           | . expression ',' assignment_expression
   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   86                   | postfix_expression '[' . expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    expression              go to state 135
    assignment_expression   go to state 56
    conditional_expression  go to state 57
    logical_expression      go to state 58
    binary_expression       go to state 59
    relational_expression   go to state 60
    shift_expression        go to state 61
    arithmetic_exp          go to state 62
    cast_expression         go to state 63
    unary_sup_expression    go to state 64
    noarray_expression      go to state 65
    unary_expression        go to state 66
    postfix_expression      go to state 67
    funccall_head           go to state 68
    primary_expression      go to state 69
    constant                go to state 70


state 107

   87 postfix_expression: postfix_expression '.' . ID

    ID  shift, and go to state 136


state 108

   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   88                   | funccall_head '(' . argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   93 argument_expression_list: .  [',', ')']
   94                         | . assignment_expression
   95                         | . argument_expression_list ',' assignment_expression
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    $default  reduce using rule 93 (argument_expression_list)

    assignment_expression     go to state 137
    conditional_expression    go to state 57
    logical_expression        go to state 58
    binary_expression         go to state 59
    relational_expression     go to state 60
    shift_expression          go to state 61
    arithmetic_exp            go to state 62
    cast_expression           go to state 63
    unary_sup_expression      go to state 64
    noarray_expression        go to state 65
    unary_expression          go to state 66
    postfix_expression        go to state 67
    funccall_head             go to state 68
    primary_expression        go to state 69
    argument_expression_list  go to state 138
    constant                  go to state 70


state 109

   10 declarator: . direct_declarator
   11 direct_declarator: . ID
   12                  | . array_declarator
   13 array_declarator: . ID array_dimdec_list
   38 parameter_declaration: declaration_specifiers_sup . declarator

    ID  shift, and go to state 18

    declarator         go to state 139
    direct_declarator  go to state 21
    array_declarator   go to state 22


state 110

   32 function_defination_head: rettype_specifier ID '(' parameter_list . ')'
   37 parameter_list: parameter_list . ',' parameter_declaration

    ','  shift, and go to state 140
    ')'  shift, and go to state 141


state 111

   36 parameter_list: parameter_declaration .

    $default  reduce using rule 36 (parameter_list)


state 112

   14 array_dimdec_list: . '[' constant ']'  [';', ',', ')']
   14                  | '[' constant ']' .  [';', ',', ')']
   15                  | . '[' constant ']' array_dimdec_list
   15                  | '[' constant ']' . array_dimdec_list

    '['  shift, and go to state 31

    $default  reduce using rule 14 (array_dimdec_list)

    array_dimdec_list  go to state 142


state 113

   21 type_specifier: . INT
   22               | . struct_specifier
   23 struct_specifier: . struct_defination
   24                 | . STRUCT ID
   25 struct_defination: . STRUCT ID '{' struct_declaration_list '}'
   25                  | STRUCT ID '{' struct_declaration_list . '}'
   26                  | . STRUCT '{' struct_declaration_list '}'
   28 struct_declaration_list: struct_declaration_list . struct_declaration
   29 struct_declaration: . type_specifier_sup declarator_list ';'
   30 type_specifier_sup: . type_specifier

    INT     shift, and go to state 23
    STRUCT  shift, and go to state 24
    '}'     shift, and go to state 143

    type_specifier      go to state 75
    struct_specifier    go to state 26
    struct_defination   go to state 27
    struct_declaration  go to state 115
    type_specifier_sup  go to state 78


state 114

   26 struct_defination: STRUCT '{' struct_declaration_list '}' .

    $default  reduce using rule 26 (struct_defination)


state 115

   28 struct_declaration_list: struct_declaration_list struct_declaration .

    $default  reduce using rule 28 (struct_declaration_list)


state 116

    9 declarator_list: declarator_list . ',' declarator
   29 struct_declaration: type_specifier_sup declarator_list . ';'

    ';'  shift, and go to state 144
    ','  shift, and go to state 34


state 117

   55 printf_statement: PRINTF '(' expression . ')' ';'
   57 expression: expression . ',' assignment_expression

    ','  shift, and go to state 91
    ')'  shift, and go to state 145


state 118

   52 return_statement: RETURN expression ';' .

    $default  reduce using rule 52 (return_statement)


state 119

   92 primary_expression: '(' expression ')' .

    $default  reduce using rule 92 (primary_expression)


state 120

   57 expression: expression ',' assignment_expression .

    $default  reduce using rule 57 (expression)


state 121

   62 logical_expression: logical_expression . LOGOR logical_expression  [LOGOR, ';', ',', ']', ')']
   62                   | logical_expression LOGOR logical_expression .  [LOGOR, ';', ',', ']', ')']
   63                   | logical_expression . LOGAND logical_expression
   64                   | logical_expression . LOGEQU logical_expression
   65                   | logical_expression . LOGNEQ logical_expression

    LOGAND  shift, and go to state 93
    LOGNEQ  shift, and go to state 94
    LOGEQU  shift, and go to state 95

    $default  reduce using rule 62 (logical_expression)

    Conflict between rule 62 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 62 and token LOGAND resolved as shift (LOGOR < LOGAND).
    Conflict between rule 62 and token LOGNEQ resolved as shift (LOGOR < LOGNEQ).
    Conflict between rule 62 and token LOGEQU resolved as shift (LOGOR < LOGEQU).


state 122

   62 logical_expression: logical_expression . LOGOR logical_expression
   63                   | logical_expression . LOGAND logical_expression  [LOGOR, LOGAND, ';', ',', ']', ')']
   63                   | logical_expression LOGAND logical_expression .  [LOGOR, LOGAND, ';', ',', ']', ')']
   64                   | logical_expression . LOGEQU logical_expression
   65                   | logical_expression . LOGNEQ logical_expression

    LOGNEQ  shift, and go to state 94
    LOGEQU  shift, and go to state 95

    $default  reduce using rule 63 (logical_expression)

    Conflict between rule 63 and token LOGOR resolved as reduce (LOGOR < LOGAND).
    Conflict between rule 63 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 63 and token LOGNEQ resolved as shift (LOGAND < LOGNEQ).
    Conflict between rule 63 and token LOGEQU resolved as shift (LOGAND < LOGEQU).


state 123

   62 logical_expression: logical_expression . LOGOR logical_expression
   63                   | logical_expression . LOGAND logical_expression
   64                   | logical_expression . LOGEQU logical_expression
   65                   | logical_expression . LOGNEQ logical_expression  [LOGOR, LOGAND, LOGNEQ, LOGEQU, ';', ',', ']', ')']
   65                   | logical_expression LOGNEQ logical_expression .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, ';', ',', ']', ')']

    $default  reduce using rule 65 (logical_expression)

    Conflict between rule 65 and token LOGOR resolved as reduce (LOGOR < LOGNEQ).
    Conflict between rule 65 and token LOGAND resolved as reduce (LOGAND < LOGNEQ).
    Conflict between rule 65 and token LOGNEQ resolved as reduce (%left LOGNEQ).
    Conflict between rule 65 and token LOGEQU resolved as reduce (%left LOGEQU).


state 124

   62 logical_expression: logical_expression . LOGOR logical_expression
   63                   | logical_expression . LOGAND logical_expression
   64                   | logical_expression . LOGEQU logical_expression  [LOGOR, LOGAND, LOGNEQ, LOGEQU, ';', ',', ']', ')']
   64                   | logical_expression LOGEQU logical_expression .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, ';', ',', ']', ')']
   65                   | logical_expression . LOGNEQ logical_expression

    $default  reduce using rule 64 (logical_expression)

    Conflict between rule 64 and token LOGOR resolved as reduce (LOGOR < LOGEQU).
    Conflict between rule 64 and token LOGAND resolved as reduce (LOGAND < LOGEQU).
    Conflict between rule 64 and token LOGNEQ resolved as reduce (%left LOGNEQ).
    Conflict between rule 64 and token LOGEQU resolved as reduce (%left LOGEQU).


state 125

   68 relational_expression: relational_expression . MORETHAN relational_expression
   69                      | relational_expression . LESSTHAN relational_expression
   70                      | relational_expression . MOREEQU relational_expression
   71                      | relational_expression . LESSEQU relational_expression  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, ';', ',', ']', ')']
   71                      | relational_expression LESSEQU relational_expression .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, ';', ',', ']', ')']

    $default  reduce using rule 71 (relational_expression)

    Conflict between rule 71 and token LESSEQU resolved as reduce (%left LESSEQU).
    Conflict between rule 71 and token MOREEQU resolved as reduce (%left MOREEQU).
    Conflict between rule 71 and token LESSTHAN resolved as reduce (%left LESSTHAN).
    Conflict between rule 71 and token MORETHAN resolved as reduce (%left MORETHAN).


state 126

   68 relational_expression: relational_expression . MORETHAN relational_expression
   69                      | relational_expression . LESSTHAN relational_expression
   70                      | relational_expression . MOREEQU relational_expression  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, ';', ',', ']', ')']
   70                      | relational_expression MOREEQU relational_expression .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, ';', ',', ']', ')']
   71                      | relational_expression . LESSEQU relational_expression

    $default  reduce using rule 70 (relational_expression)

    Conflict between rule 70 and token LESSEQU resolved as reduce (%left LESSEQU).
    Conflict between rule 70 and token MOREEQU resolved as reduce (%left MOREEQU).
    Conflict between rule 70 and token LESSTHAN resolved as reduce (%left LESSTHAN).
    Conflict between rule 70 and token MORETHAN resolved as reduce (%left MORETHAN).


state 127

   68 relational_expression: relational_expression . MORETHAN relational_expression
   69                      | relational_expression . LESSTHAN relational_expression  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, ';', ',', ']', ')']
   69                      | relational_expression LESSTHAN relational_expression .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, ';', ',', ']', ')']
   70                      | relational_expression . MOREEQU relational_expression
   71                      | relational_expression . LESSEQU relational_expression

    $default  reduce using rule 69 (relational_expression)

    Conflict between rule 69 and token LESSEQU resolved as reduce (%left LESSEQU).
    Conflict between rule 69 and token MOREEQU resolved as reduce (%left MOREEQU).
    Conflict between rule 69 and token LESSTHAN resolved as reduce (%left LESSTHAN).
    Conflict between rule 69 and token MORETHAN resolved as reduce (%left MORETHAN).


state 128

   68 relational_expression: relational_expression . MORETHAN relational_expression  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, ';', ',', ']', ')']
   68                      | relational_expression MORETHAN relational_expression .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, ';', ',', ']', ')']
   69                      | relational_expression . LESSTHAN relational_expression
   70                      | relational_expression . MOREEQU relational_expression
   71                      | relational_expression . LESSEQU relational_expression

    $default  reduce using rule 68 (relational_expression)

    Conflict between rule 68 and token LESSEQU resolved as reduce (%left LESSEQU).
    Conflict between rule 68 and token MOREEQU resolved as reduce (%left MOREEQU).
    Conflict between rule 68 and token LESSTHAN resolved as reduce (%left LESSTHAN).
    Conflict between rule 68 and token MORETHAN resolved as reduce (%left MORETHAN).


state 129

   74 arithmetic_exp: arithmetic_exp . '+' arithmetic_exp  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', ';', ',', ']', ')', '%']
   74               | arithmetic_exp '+' arithmetic_exp .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', ';', ',', ']', ')', '%']
   75               | arithmetic_exp . '-' arithmetic_exp
   76               | arithmetic_exp . '*' arithmetic_exp
   77               | arithmetic_exp . '/' arithmetic_exp
   78               | arithmetic_exp . '%' arithmetic_exp

    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    '%'       [reduce using rule 74 (arithmetic_exp)]
    $default  reduce using rule 74 (arithmetic_exp)

    Conflict between rule 74 and token '+' resolved as reduce (%left '+').
    Conflict between rule 74 and token '-' resolved as reduce (%left '-').
    Conflict between rule 74 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 74 and token '/' resolved as shift ('+' < '/').


state 130

   74 arithmetic_exp: arithmetic_exp . '+' arithmetic_exp
   75               | arithmetic_exp . '-' arithmetic_exp  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', ';', ',', ']', ')', '%']
   75               | arithmetic_exp '-' arithmetic_exp .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', ';', ',', ']', ')', '%']
   76               | arithmetic_exp . '*' arithmetic_exp
   77               | arithmetic_exp . '/' arithmetic_exp
   78               | arithmetic_exp . '%' arithmetic_exp

    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    '%'       [reduce using rule 75 (arithmetic_exp)]
    $default  reduce using rule 75 (arithmetic_exp)

    Conflict between rule 75 and token '+' resolved as reduce (%left '+').
    Conflict between rule 75 and token '-' resolved as reduce (%left '-').
    Conflict between rule 75 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 75 and token '/' resolved as shift ('-' < '/').


state 131

   74 arithmetic_exp: arithmetic_exp . '+' arithmetic_exp
   75               | arithmetic_exp . '-' arithmetic_exp
   76               | arithmetic_exp . '*' arithmetic_exp  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', '*', '/', ';', ',', ']', ')', '%']
   76               | arithmetic_exp '*' arithmetic_exp .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', '*', '/', ';', ',', ']', ')', '%']
   77               | arithmetic_exp . '/' arithmetic_exp
   78               | arithmetic_exp . '%' arithmetic_exp

    '%'  shift, and go to state 104

    '%'       [reduce using rule 76 (arithmetic_exp)]
    $default  reduce using rule 76 (arithmetic_exp)

    Conflict between rule 76 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 76 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 76 and token '*' resolved as reduce (%left '*').
    Conflict between rule 76 and token '/' resolved as reduce (%left '/').


state 132

   74 arithmetic_exp: arithmetic_exp . '+' arithmetic_exp
   75               | arithmetic_exp . '-' arithmetic_exp
   76               | arithmetic_exp . '*' arithmetic_exp
   77               | arithmetic_exp . '/' arithmetic_exp  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', '*', '/', ';', ',', ']', ')', '%']
   77               | arithmetic_exp '/' arithmetic_exp .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', '*', '/', ';', ',', ']', ')', '%']
   78               | arithmetic_exp . '%' arithmetic_exp

    '%'  shift, and go to state 104

    '%'       [reduce using rule 77 (arithmetic_exp)]
    $default  reduce using rule 77 (arithmetic_exp)

    Conflict between rule 77 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 77 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 77 and token '*' resolved as reduce (%left '*').
    Conflict between rule 77 and token '/' resolved as reduce (%left '/').


state 133

   74 arithmetic_exp: arithmetic_exp . '+' arithmetic_exp
   75               | arithmetic_exp . '-' arithmetic_exp
   76               | arithmetic_exp . '*' arithmetic_exp
   77               | arithmetic_exp . '/' arithmetic_exp
   78               | arithmetic_exp . '%' arithmetic_exp  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', '*', '/', ';', ',', ']', ')', '%']
   78               | arithmetic_exp '%' arithmetic_exp .  [LOGOR, LOGAND, LOGNEQ, LOGEQU, LESSEQU, MOREEQU, LESSTHAN, MORETHAN, '+', '-', '*', '/', ';', ',', ']', ')', '%']

    '+'  shift, and go to state 100
    '-'  shift, and go to state 101
    '*'  shift, and go to state 102
    '/'  shift, and go to state 103
    '%'  shift, and go to state 104

    '+'       [reduce using rule 78 (arithmetic_exp)]
    '-'       [reduce using rule 78 (arithmetic_exp)]
    '*'       [reduce using rule 78 (arithmetic_exp)]
    '/'       [reduce using rule 78 (arithmetic_exp)]
    '%'       [reduce using rule 78 (arithmetic_exp)]
    $default  reduce using rule 78 (arithmetic_exp)


state 134

   59 assignment_expression: unary_expression '=' assignment_expression .

    $default  reduce using rule 59 (assignment_expression)


state 135

   57 expression: expression . ',' assignment_expression
   86 postfix_expression: postfix_expression '[' expression . ']'

    ','  shift, and go to state 91
    ']'  shift, and go to state 146


state 136

   87 postfix_expression: postfix_expression '.' ID .

    $default  reduce using rule 87 (postfix_expression)


state 137

   94 argument_expression_list: assignment_expression .

    $default  reduce using rule 94 (argument_expression_list)


state 138

   88 postfix_expression: funccall_head '(' argument_expression_list . ')'
   95 argument_expression_list: argument_expression_list . ',' assignment_expression

    ','  shift, and go to state 147
    ')'  shift, and go to state 148


state 139

   38 parameter_declaration: declaration_specifiers_sup declarator .

    $default  reduce using rule 38 (parameter_declaration)


state 140

   16 declaration_specifiers_sup: . declaration_specifiers
   17 declaration_specifiers: . storage_class_specifier type_specifier
   18 storage_class_specifier: .  [INT, STRUCT]
   19                        | . AUTO
   20                        | . STATIC
   37 parameter_list: parameter_list ',' . parameter_declaration
   38 parameter_declaration: . declaration_specifiers_sup declarator

    AUTO    shift, and go to state 6
    STATIC  shift, and go to state 7

    $default  reduce using rule 18 (storage_class_specifier)

    declaration_specifiers_sup  go to state 109
    declaration_specifiers      go to state 12
    storage_class_specifier     go to state 13
    parameter_declaration       go to state 149


state 141

   32 function_defination_head: rettype_specifier ID '(' parameter_list ')' .

    $default  reduce using rule 32 (function_defination_head)


state 142

   15 array_dimdec_list: '[' constant ']' array_dimdec_list .

    $default  reduce using rule 15 (array_dimdec_list)


state 143

   25 struct_defination: STRUCT ID '{' struct_declaration_list '}' .

    $default  reduce using rule 25 (struct_defination)


state 144

   29 struct_declaration: type_specifier_sup declarator_list ';' .

    $default  reduce using rule 29 (struct_declaration)


state 145

   55 printf_statement: PRINTF '(' expression ')' . ';'

    ';'  shift, and go to state 150


state 146

   86 postfix_expression: postfix_expression '[' expression ']' .

    $default  reduce using rule 86 (postfix_expression)


state 147

   58 assignment_expression: . conditional_expression
   59                      | . unary_expression '=' assignment_expression
   60 conditional_expression: . logical_expression
   61 logical_expression: . binary_expression
   62                   | . logical_expression LOGOR logical_expression
   63                   | . logical_expression LOGAND logical_expression
   64                   | . logical_expression LOGEQU logical_expression
   65                   | . logical_expression LOGNEQ logical_expression
   66 binary_expression: . relational_expression
   67 relational_expression: . shift_expression
   68                      | . relational_expression MORETHAN relational_expression
   69                      | . relational_expression LESSTHAN relational_expression
   70                      | . relational_expression MOREEQU relational_expression
   71                      | . relational_expression LESSEQU relational_expression
   72 shift_expression: . arithmetic_exp
   73 arithmetic_exp: . cast_expression
   74               | . arithmetic_exp '+' arithmetic_exp
   75               | . arithmetic_exp '-' arithmetic_exp
   76               | . arithmetic_exp '*' arithmetic_exp
   77               | . arithmetic_exp '/' arithmetic_exp
   78               | . arithmetic_exp '%' arithmetic_exp
   79 cast_expression: . unary_sup_expression
   80 unary_sup_expression: . noarray_expression
   81                     | . '-' unary_sup_expression
   82                     | . '!' unary_sup_expression
   83 noarray_expression: . unary_expression
   84 unary_expression: . postfix_expression
   85 postfix_expression: . primary_expression
   86                   | . postfix_expression '[' expression ']'
   87                   | . postfix_expression '.' ID
   88                   | . funccall_head '(' argument_expression_list ')'
   89 funccall_head: . ID
   90 primary_expression: . ID
   91                   | . constant
   92                   | . '(' expression ')'
   95 argument_expression_list: argument_expression_list ',' . assignment_expression
   96 constant: . NUM
   97         | . CHARACTER

    NUM        shift, and go to state 39
    CHARACTER  shift, and go to state 40
    ID         shift, and go to state 41
    '-'        shift, and go to state 42
    '('        shift, and go to state 45
    '!'        shift, and go to state 46

    assignment_expression   go to state 151
    conditional_expression  go to state 57
    logical_expression      go to state 58
    binary_expression       go to state 59
    relational_expression   go to state 60
    shift_expression        go to state 61
    arithmetic_exp          go to state 62
    cast_expression         go to state 63
    unary_sup_expression    go to state 64
    noarray_expression      go to state 65
    unary_expression        go to state 66
    postfix_expression      go to state 67
    funccall_head           go to state 68
    primary_expression      go to state 69
    constant                go to state 70


state 148

   88 postfix_expression: funccall_head '(' argument_expression_list ')' .

    $default  reduce using rule 88 (postfix_expression)


state 149

   37 parameter_list: parameter_list ',' parameter_declaration .

    $default  reduce using rule 37 (parameter_list)


state 150

   55 printf_statement: PRINTF '(' expression ')' ';' .

    $default  reduce using rule 55 (printf_statement)


state 151

   95 argument_expression_list: argument_expression_list ',' assignment_expression .

    $default  reduce using rule 95 (argument_expression_list)
